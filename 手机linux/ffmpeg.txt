ffmpeg -i Tor_Animation_en.mp4 tor.mkv

加上 -vcodec hevc ，这样 FFmpeg 就会使用 HEVC 而不是 H264 进行视频的编码。
最后我们要使用的命令是这样的：
ffmpeg -i Tor_Animation_en.mp4 -vcodec hevc tor.mkv

同样的，在 ffmpeg -help 的输出中，我们也可以找到 -acodec 选项，它是用来指定
音频编码的。所以如果我想要以 Matroska 作为封装格式， HEVC 作为视频编码， Opus 作为
音频编码，使用的命令会是这样的：
ffmpeg -i Tor_Animation_en.mp4 -vcodec hevc -acodec opus tor.mkv

如果我想要直接拷贝媒体流到输出文件中而不重新进行编码（也就是只转换一下封装格式），在编
码器的位置上写 copy 。比如 ffmpeg -i Tor_Animation_en.mp4 -vcodec copy -acodec copy tor.mkv ，因
为这样不进行编码，所以通常会很快。

    提示： -vcodec 有一个缩写叫做 -c:v ， -acodec 有一个缩写叫做 -c:a 。
    也就是说， ffmpeg -i Tor_Animation_en.mp4 -vcodec hevc -acodec opus tor.mkv 可以
	写为 ffmpeg -i Tor_Animation_en.mp4 -c:v hevc -c:a opus tor.mkv ，两者没有任何区别。
    使用这样的小把戏可以省下打几个字母的时间。以后我举例也一直都会用这种简单的写法。

AAC 是一种被十分广泛使用的音频编码，也是 MP4 封装格式的默认音频编码
ffmpeg -i Tor_Animation_en.mp4 -c:v hevc -c:a aac -strict -2 tor.mkv


转换时:
在执行了上一节最后给出的命令后，我的终端窗口冒出了大量的字符，但是还没等我看完，就迅
速被这样的信息给填满了：
frame=   28 fps=0.0 q=0.0 size=       2kB time=00:00:01.49 bitrate=  11.3kbits/s
frame=   30 fps= 17 q=-0.0 size=      13kB time=00:00:01.49 bitrate=  71.1kbits/
frame=   34 fps= 15 q=-0.0 size=      20kB time=00:00:01.66 bitrate=  99.9kbits/
frame=   38 fps= 13 q=-0.0 size=      31kB time=00:00:01.83 bitrate= 138.1kbits/
frame=   42 fps= 12 q=-0.0 size=      40kB time=00:00:02.00 bitrate= 165.1kbits/


    最左边的 frame= 65 是转码所进行到的帧数，显示 65 就表示现在已经转到了第 65 帧。
    第二个 fps=8.8 中的 FPS 就是 Frame per Second ，也就是现在电脑每秒所处理的帧的数量。
	注意这个数字跟视频的帧率并无关系。
    其实我也不知道后面那个 q=-0.0 是什么意思，大家不要来打我呀。
    接下来的 size= 92kB 表示现在已经转换出来的视频的体积，这个数字只会越变越大啊。
    第五个 time=00:00:02.85 顾名思义就是时间了，它是已经转换出来的视频的时间。在我看来，
	它也是一个比百分比进度条更加精准的进度显示。

如果你认为这么多信息是“无用的”，那么只要看 time 这一栏就好，我想你应该知道你原来的视频
有多长，那么从已经转换的时间应该能看出你已经完成了多少了吧？


转换前：
ffmpeg version 2.8 Copyright (c) 2000-2015 the FFmpeg developers
built with gcc 5.2.0 (GCC)
  configuration: --prefix=/usr --disable-debug --disable-static --disable-stripp
ing --enable-avisynth --enable-avresample --enable-fontconfig --enable-gnutls --
enable-gpl --enable-ladspa --enable-libass --enable-libbluray --enable-libfreety
pe --enable-libfribidi --enable-libgsm --enable-libmodplug --enable-libmp3lame -
-enable-libopencore_amrnb --enable-libopencore_amrwb --enable-libopenjpeg --enab
le-libopus --enable-libpulse --enable-libschroedinger --enable-libsoxr --enable-
libspeex --enable-libssh --enable-libtheora --enable-libv4l2 --enable-libvorbis 
--enable-libvpx --enable-libwebp --enable-libx264 --enable-libx265 --enable-libx
vid --enable-shared --enable-version3 --enable-x11grab
  libavutil      54. 31.100 / 54. 31.100
  libavcodec     56. 60.100 / 56. 60.100
  libavformat    56. 40.101 / 56. 40.101
  libavdevice    56.  4.100 / 56.  4.100
  libavfilter     5. 40.101 /  5. 40.101
  libavresample   2.  1.  0 /  2.  1.  0
  libswscale      3.  1.101 /  3.  1.101
  libswresample   1.  2.101 /  1.  2.101
  libpostproc    53.  3.100 / 53.  3.100
Input #0, mov,mp4,m4a,3gp,3g2,mj2, from 'Tor_Animation_en.mp4':
  Metadata:
    major_brand     : mp42
    minor_version   : 0
    compatible_brands: mp42isomavc1
    creation_time   : 2015-03-12 15:36:45
    encoder         : HandBrake 0.9.5 2011010300
  Duration: 00:02:17.45, start: 0.000000, bitrate: 842 kb/s
    Stream #0:0(und): Video: h264 (Main) (avc1 / 0x31637661), yuv420p(tv, bt709)
, 1920x1080 [SAR 1:1 DAR 16:9], 674 kb/s, 24 fps, 24 tbr, 90k tbn, 180k tbc (def
ault)
    Metadata:
      creation_time   : 2015-03-12 15:36:45
      encoder         : JVT/AVC Coding
    Stream #0:1(eng): Audio: aac (LC) (mp4a / 0x6134706D), 48000 Hz, stereo, flt
p, 163 kb/s (default)
    Metadata:
      creation_time   : 2015-03-12 15:36:45

上面的版本信息不用管，然后我们能看到
一行 Input #0, mov,mp4,m4a,3gp,3g2,mj2, from 'Tor_Animation_en.mp4': ，显然这下面就是
关于第 0 个输入文件的信息了。（别忘了，在 IT 界，许多东西都喜欢以 0 而不是 1 开始计数）

Duration: 00:02:17.45, start: 0.000000, bitrate: 842 kb/s 这一行告诉我们这个视
频长度是 2 分 17 秒 45 ，从 0.000000 开始，比特率 842 kb/s 。

下面一行很长，不过我们只看前面一段 Stream #0:0(und): Video: h264 ，它告诉我们， 0 号
输入文件的 0 号媒体流，视频流， h264 编码。

然后是 Stream #0:1(eng): Audio: aac ， 0 号输入文件的 1 号媒体流，音频流， aac 编码。

再往下 x265 [info] 开头的一大堆，都是 HEVC 的编码程序 x265 所给出的信息，看不懂就甭管了。

后面我们就能看到关于输出文件的信息，还有其编码。

接下来重要的信息来了：

Stream mapping:
  Stream #0:0 -> #0:0 (h264 (native) -> hevc (libx265))
  Stream #0:1 -> #0:1 (aac (native) -> aac (native))

媒体流的分配，很直观，我们能看到输入文件的视频流从 h264 转成了 hevc ，音频流从 aac 还是转
成了一样的 aac 。从这里你可以快速的检查一下，你是否输入了你想要执行的命令。

哦，还不能忘记最后一条很有用的信息， Press [q] to stop, [?] for help ，它告诉你在转
码的时候按 q 来中断， ? 来查看帮助。有经验的人可能知道用 Ctrl + C 可以中断，不过那个是
强制退出，按 q 是相对自然一些的中断。

按 ? 会出来什么呢？感兴趣的话就自己来探索一下吧。

