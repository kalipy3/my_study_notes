 vim回跳与跳回 CTRL+o, 向后跳. CTRL+i 向前跳

ln -s t1 t2创建t2的软链接t1
ln t1 t2创建t2的硬链接t1

ls -li i参数：显示文件节点信息
ls -a 查看隐藏文件

nl t1.txt 查看文件带显示行号

useradd -g group1 user1 创建用户user1，指定其用户组为group1
userdel -r user1 删除用户user1，r参数：删除用户主目录和记录
usermod -d /home1 -g group2 user1 将主目录改为home1，组改为group2

passwd 选项 用户名

可使用的选项：

    -l 锁定口令，即禁用账号。
    -u 口令解锁。
    -d 使账号无口令。
    -f 强迫用户下次登录时修改口令。
$ passwd 
Old password:****** 
New password:******* 
Re-enter new password:*******

如果是超级用户，可以用下列形式指定任何用户的口令：
# passwd user1 
New password:******* 
Re-enter new password:*******

# passwd -d sam

此命令将用户 sam 的口令删除，这样用户 sam 下一次登录时，系统就不再允许该用户登录了。

-l(lock)某一用户使其不能登录
# passwd -l sam


vim使用：

 配置Linux下vim自动缩进等功能

从终端打开配置文件：

vim ~/.vimrc

添加如下代码：

set tabstop=4
set softtabstop=4
set shiftwidth=4
set autoindent
set cindent
set cinoptions={0,1s,t0,n-2,p2s,(03s,=.5s,>1s,=1s,:1s
set nu
set ruler
set hlsearch
set backspace=2
 

含义如下：
1.设置（软）制表符宽度为4
set tabstop=4
set softtabstop=4
2.设置缩进的空格数为4
set shiftwidth=4
3.设置自动缩进：即每行的缩进值与上一行相等；使用 noautoindent 取消设置：
set autoindent
4.使用 C/C++ 语言的自动缩进方式
set cindent
5.设置C/C++语言的具体缩进方式（以我的windows风格为例）：
set cinoptions={0,1s,t0,n-2,p2s,(03s,=.5s,>1s,=1s,:1s
6.显示行号
set nu
7.显示标尺
set ruler
8.将搜索内容反白
set hlsearch
9.可以删除任意值
set backspace=2 



二、复制多行
任务：将第9行至第15行的数据，复制到第16行

方法1：（强烈推荐）
：9，15 copy 16  或 ：9，15 co 16
由此可有：
：9，15 move 16  或 :9,15 m 16 将第9行到第15行的文本内容到第16行的后面  


vi设置自动缩进：set smartindent


Vim格式化代码就是缩进，不能完全保证正常缩进，只能是尝试一下。
缩进的类型有多种, 都是用等号命令: =

    全部格式化 : gg=G
    对当前行格式化(缩进): ==
    对以下多行格式化(倍数操作): [count] ==
    选择多行后, 执行 等号命令 =




移动光标的方法
h 或 向左箭头键(←) 	光标向左移动一个字符
j 或 向下箭头键(↓) 	光标向下移动一个字符
k 或 向上箭头键(↑) 	光标向上移动一个字符
l 或 向右箭头键(→) 	光标向右移动一个字符

[Ctrl] + [f] 	屏幕『向下』移动一页，相当于 [Page Down]按键 (常用)
[Ctrl] + [b] 	屏幕『向上』移动一页，相当于 [Page Up] 按键 (常用)

0 或功能键[Home] 	这是数字『 0 』：移动到这一行的最前面字符处 (常用)
$ 或功能键[End] 	移动到这一行的最后面字符处(常用)

G 	移动到这个档案的最后一行(常用)
nG 	n 为数字。移动到这个档案的第 n 行。例如 20G 则会移动到这个档案的第 20 行(可配合 :set nu)
gg 	移动到这个档案的第一行，相当于 1G 啊！ (常用)
n<Enter> 	n 为数字。光标向下移动 n 行(常用)


/word 	向光标之下寻找一个名称为 word 的字符串。例如要在档案内搜寻 vbird 这个字符
串，就输入 /vbird 即可！ (常用)

?word 	向光标之上寻找一个字符串名称为 word 的字符串。

n 	这个 n 是英文按键。代表重复前一个搜寻的动作。举例来说， 如果刚刚我们执行 /vbird 去向
下搜寻 vbird 这个字符串，则按下 n 后，会向下继续搜寻下一个名称为 vbird 的字符串。如果是执
行 ?vbird 的话，那么按下 n 则会向上继续搜寻名称为 vbird 的字符串！

N 	这个 N 是英文按键。与 n 刚好相反，为『反向』进行前一个搜寻动作。 例
如 /vbird 后，按下 N 则表示『向上』搜寻 vbird 。

在 100 到 200 行之间搜寻 vbird 并取代为 VBIRD 则：
『:100,200s/vbird/VBIRD/g』。(常用)

:1,$s/word1/word2/g 或 :%s/word1/word2/g 	从第一行到最后一行寻找 word1 字符串，并将该字
符串取代为 word2 ！(常用)
:1,$s/word1/word2/gc 或 :%s/word1/word2/gc 	从第一行到最后一行寻找 word1 字符串，并将该
字符串取代为 word2 ！且在取代前显示提示字符给用户确认 (confirm) 是否需要取代！(常用)

删除、复制与贴上
x, X 	在一行字当中，x 为向后删除一个字符 (相当于 [del] 按键)， X 为向前删除一个字符(相当于 [backspace] 亦即是退格键) (常用)
nx 	n 为数字，连续向后删除 n 个字符。举例来说，我要连续删除 10 个字符， 『10x』。
dd 	删除游标所在的那一整行(常用)
ndd 	n 为数字。删除光标所在的向下 n 行，例如 20dd 则是删除 20 行 (常用)

d1G 	删除光标所在到第一行的所有数据
dG 	删除光标所在到最后一行的所有数据
d$ 	删除游标所在处，到该行的最后一个字符
d0 	那个是数字的 0 ，删除游标所在处，到该行的最前面一个字符
yy 	复制游标所在的那一行(常用)
nyy 	n 为数字。复制光标所在的向下 n 行，例如 20yy 则是复制 20 行(常用)
y1G 	复制游标所在行到第一行的所有数据
yG 	复制游标所在行到最后一行的所有数据
y0 	复制光标所在的那个字符到该行行首的所有数据
y$ 	复制光标所在的那个字符到该行行尾的所有数据

p, P 	p 为将已复制的数据在光标下一行贴上，P 则为贴在游标上一行！（常用）
u 	复原前一个动作。(常用)
[Ctrl]+r 	重做上一个动作。(常用)
这个 u 与 [Ctrl]+r 是很常用的指令！一个是复原，另一个则是重做一次～ 利用这两个
功能按键，你的编辑，嘿嘿！很快乐的啦！（即撤销与恢复）
. 	不要怀疑！这就是小数点！意思是重复前一个动作的意思。 如果你想要重复删除、重复贴上等等动作，按下小数点『.』就好了！ (常用)

vim 环境的变更
:set nu 	显示行号，设定之后，会在每一行的前缀显示该行的行号
:set nonu 	与 set nu 相反，为取消行号！

特别注意，在 vi/vim 中，数字是很有意义的！数字通常代表重复做几次的意思！ 也有可
能是代表去到第几个什么什么的意思。

举例来说，要删除 50 行，则是用 『50dd』 对吧！ 数字加在动作之前，如我要向下移
动 20 行呢？那就是『20j』或者是『20↓』即可。 

vim 中批量添加注释

方法一 ：块选择模式

批量注释：

Ctrl + v 进入块选择模式，然后移动光标选中你要注释的行，再按大写的 I 进入行首
插入模式输入注释符号如 // 或 #，输入完毕之后，按两下 ESC，Vim 会自动将你选中
的所有行首都加上注释，保存退出完成注释。

取消注释：

Ctrl + v 进入块选择模式，选中你要删除的行首的注释符号，注意 // 要选中两个，选好
之后按 d 即可删除注释，ESC 保存退出。

方法二: 替换命令

批量注释。

使用下面命令在指定的行首添加注释。

使用名命令格式： :起始行号,结束行号s/^/注释符/g（注意冒号）。

取消注释：

使用名命令格式： :起始行号,结束行号s/^注释符//g（注意冒号）。

