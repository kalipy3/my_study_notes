如何添加原本不被Ctags和taglist所支持的语言呢？(甚至是学编译原理时自己创造的语言)

解决方案：

1.在~/.ctags文件（没有则新建）中添加如下代码：
--langdef=mynodejs
--langmap=mynodejs:.nodejs
--regex-mynodejs=/function([ \t]+\([^)]+\))?[ \t]+([a-zA-Z0-9_]+)/\2/f,func/
--regex-mynodejs=/var[ \t]+([a-zA-Z_][a-zA-Z0-9_]+)/\1/d,var/
--regex-mynodejs=/type[ \t]+([a-zA-Z_][a-zA-Z0-9_]+)/\1/d,type/

注意：
如果仅仅只是要增加已有语言语法扩展支持的话，只需：(其它的就都不需要配置了，比如这里增加ctags
javascript对async语法的支持，至于为什么可以async了，因为不是/^function，即没有限制正则的开始符号^)
--regex-javascript=/function([ \t]+\([^)]+\))?[ \t]+([a-zA-Z0-9_]+)/\2/f,func/


解释：

a)8行的function是要匹配的函数的特征，如在js中，
async void function a(){},其中function是函数的特征，a是函数的名字

b)8行尾部/f,func/中，f表示告诉ctags这是函数，而func是在vim的:Tlist中函数的显示

然后再通过 ctags --list-languages 去查看发现既可以支持mynodejs语言，
其中ctags中查找支持的文件类型和后缀可以通过如下几个命令去查看：
ctags --list-languages
ctags --list-kinds
ctags --list-maps

2.在Taglist中添加语言种类：
打开taglist的文件，例如 ~/.vim/xxx/taglist.vim, 添加下面的内容：
let s:tlist_def_mynodejs_settings= 'mynodejs;f:func'

解释：添加了一类可以被Taglist识别的语法种类，同时规定了那些部分是需要显示在tag list当中的


3.打开~/.vimrc，加入下面这一行：
au BufNewFile,BufRead *.nodejs    setf mynodejs

解释：让vim也能够识别出mynode的文件

同时不要忘记’set filetype on’来保证vim会去识别语法种类（当然，这个其实也
是使用语法高亮的基本要求）

4.使用的时候，无非就是按照：
a) ctags -R * 来生成tag文件；
b) vim打开文件，并且可以适当设置’ set tags=xxxxxx’ 来load文件；
c) 用:Tlist打开tag侧边栏



进阶：
tagbar插件，添加对 mynodejs的支持
~/.vimrc，加入下面这一行：
let g:tagbar_type_mynodejs = {'ctagstype': 'mynodejs', 'kinds': ['f:func
:0:0']}







更多的例子：
a)
--langdef=Elixir
--langmap=Elixir:.ex.exs
--regex-Elixir=/^[ \t]*def(p?)[ \t]+([a-z_][a-zA-Z0-9_?!]*)/\2/f,functions,functions (def ...)/
--regex-Elixir=/^[ \t]*defcallback[ \t]+([a-z_][a-zA-Z0-9_?!]*)/\1/c,callbacks,callbacks (defcallback ...)/
--regex-Elixir=/^[ \t]*defdelegate[ \t]+([a-z_][a-zA-Z0-9_?!]*)/\1/d,delegates,delegates (defdelegate ...)/
--regex-Elixir=/^[ \t]*defexception[ \t]+([A-Z][a-zA-Z0-9_]*\.)*([A-Z][a-zA-Z0-9_?!]*)/\2/e,exceptions,exceptions (defexception ...)/
--regex-Elixir=/^[ \t]*defimpl[ \t]+([A-Z][a-zA-Z0-9_]*\.)*([A-Z][a-zA-Z0-9_?!]*)/\2/i,implementations,implementations (defimpl ...)/
--regex-Elixir=/^[ \t]*defmacro(p?)[ \t]+([a-z_][a-zA-Z0-9_?!]*)\(/\2/a,macros,macros (defmacro ...)/
--regex-Elixir=/^[ \t]*defmacro(p?)[ \t]+([a-zA-Z0-9_?!]+)?[ \t]+([^ \tA-Za-z0-9_]+)[ \t]*[a-zA-Z0-9_!?!]/\3/o,operators,operators (e.g. "defmacro a <<< b")/
--regex-Elixir=/^[ \t]*defmodule[ \t]+([A-Z][a-zA-Z0-9_]*\.)*([A-Z][a-zA-Z0-9_?!]*)/\2/m,modules,modules (defmodule ...)/
--regex-Elixir=/^[ \t]*defprotocol[ \t]+([A-Z][a-zA-Z0-9_]*\.)*([A-Z][a-zA-Z0-9_?!]*)/\2/p,protocols,protocols (defprotocol...)/
--regex-Elixir=/^[ \t]*Record\.defrecord[ \t]+:([a-zA-Z0-9_]+)/\1/r,records,records (defrecord...)/

let g:tagbar_type_elixir = {'ctagstype': 'elixir', 'kinds': ['f:functions:0:0', 'c:callbacks:0:0', 'd:delegates:0:0', 'e:exceptions:0:0', 'i:implementations:0:0', 'a:macros:0:0', 'o:operators:0:0', 'm:modules:0:0', 'p:protocols:0:0', 'r:records:0:0'], 'sro': '.', 'kind2scope': {'m': 'modules'}, 'scope2kind': {'modules': 'm'}}



b)


Vim+Ctags+Taglist的应用是一个非常方便的解决方案，网络上关于这样的简单介绍数不胜数，只要愿意不妨搜索一下即可。但是有一个问题是大多数文章没有阐明的，那就是如何添加原本不被Ctags和taglist所支持的语言呢？花了点时间，找到了解决，姑且备忘于下，希望利人利己。

本文均以SystemVerilog为例说明：
Ctags中添加新的语言

ctags的配置文件其实在 ~/.ctags中，打开该文件，添加如下代码[1. 从某论坛上看到，做了一定修改，用以支持extern,static等前缀]：

    –langdef=systemverilog
    –langmap=systemverilog:.sv.svh.svi
    –regex-systemverilog=/^[ \t]*(virtual)?[ \t]*class[ \t]*([a-zA-Z_0-9]+)/\2/c,class/
    –regex-systemverilog=/^[ \t]*(extern)?[ \t]*(static)?[ \t]*(virtual)?[ \t]*task[ \t]*.*[ \t]+([a-zA-Z_0-9]*::)?([a-zA-Z_0-9]+)[ \t]*[(;]/\5/t,task/
    –regex-systemverilog=/^[ \t]*(extern)?[ \t]*(static)?[ \t]*(virtual)?[ \t]*function[ \t]*.*[ \t]+([a-zA-Z_0-9]*::)?([a-zA-Z_0-9]+)[ \t]*[(;]/\5/f,function/
    –regex-systemverilog=/^[ \t]*module[ \t]*([a-zA-Z_0-9]+)/\1/m,module/
    –regex-systemverilog=/^[ \t]*program[ \t]*([a-zA-Z_0-9]+)/\1/p,program/
    –regex-systemverilog=/^[ \t]*interface[ \t]*([a-zA-Z_0-9]+)/\1/i,interface/
    –regex-systemverilog=/^[ \t]*package[ \t]*([a-zA-Z_0-9]+)/\1/k,package/
    –regex-systemverilog=/^[ \t]*typedef[ \t]+.*[ \t]+([a-zA-Z_0-9]+)[ \t]*;/\1/e,typedef/
    –systemverilog-kinds=+ctfmpie

这里从代码可以读出无非是依次定义了新的语言种类，指明了文件后缀，然后使用正则匹配来抓出你希望的关键字，熟悉正则表达式的人自然一读就懂，可以自己扩展，不熟悉的人，那就照copy吧。
Taglist中添加语言种类

打开taglist的文件，例如 ~/.vim/plugin/taglist.vim, 添加下面的内容：

    ” systemverilog language
    let s:tlist_def_systemverilog_settings= ‘systemverilog;m:module;c:class;’ .
              \ ‘t:task;p:program;f:function;i:interface;e:typedef’

语句也很简单，就是添加了一类可以被Taglist识别的语法种类，同时规定了那些部分是需要显示在tag list当中的；
Vim当中添加File type

似乎有点本末倒置了，呵呵，其实最开始的一点就是要让vim也能够识别出systemverilog的文件，那么请打开~/.vim/filetype.vim，加入下面这一行：

    au BufNewFile,BufRead *.sv,*.svh    setf systemverilog

同时不要忘记’set filetype on’来保证vim会去识别语法种类（当然，这个其实也是使用语法高亮的基本要求）。
步骤

使用的时候，无非就是按照：
1. ctags -R * 来生成tag文件；
2. vim打开文件，并且可以适当设置’ set tags=xxxxxx’ 来load文件；
3. 用:Tlist打开tag侧边栏，其余都可以按照网上教程操作
