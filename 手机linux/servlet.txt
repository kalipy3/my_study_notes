/*
 * Servlet的生命周期：
 * 		1.从第一次调用到服务器关闭。
 * 		2.如果Servlet在web.xml中配置了load-on-startup，则从服务器启动到服务器关闭。
 * 注意：
 * 		init方法是对Servlet进行初始化的一个方法，会在Servlet第一次加载进行存储时执行
 * 		destory方法是在servlet被销毁时执行，也就是服务器关闭时。
 */



 Cookie学习：
 * 	问题：
 * 		HTTP协议是没有记忆功能的，一次请求结束后，相关数据会被销毁。如果第二次的请求需要
 * 		使用相同的请求数据怎么办呢？
 * 		难道是让用户再次请求书写么？
 * 	解决：使用Cookie技术
 * 	
 * 作用：解决了发送的不同请求的数据共享问题
 
 
 
 
 
/*session技术学习：
 * 	问题：
 * 		一个用户的不同请求处理数据共享怎么办？
 * 	解决：
 * 		使用session技术
 * 	原理：
 * 		用户第一次访问服务器，服务器会创建一个session对象给用户，并将
 * 		该session对象的JSESSIONID使用Cookie技术存储到浏览器中，
 * 		保证用户的其它请求能够获取到同一个session对象，也保证了不同请求
 * 		能够获取到共享的数据。
 * 	特点:
 * 		存储在服务器端
 * 		服务器进行创建
 * 		依赖Cookie技术
 * 		一次会话
 * 		默认存储时间是30分钟
 * 	作用：
 * 		解决了一个用户不同请求处理的数据共享问题
 * 	使用：
 * 		创建session对象/获取session对象
 * 			HttpSession hs = req.getSession();
 * 			如果请求中拥有session的标识符也就是JSESSIONID,则返回其对应的session对象
 * 			如果请求中没有session的标识符也即JSESSIONID，则创建新的session对象，并将其JSESSIONID作为从Cookie数据存储到浏览器内存中
 * 			如果session对象失效了，也会重新创建一个session对象，并将其JSESSIONID存储在浏览器内存中
 * 		设置session存储时间
 * 			hs.setMaxInactiveInterval(int seconds);
 * 			注意：在指定的时间内session对象没有被使用则销毁，如果使用了则重新计时
 * 		设置session强制失效
 * 			hs.invalidate();
 * 		存储和获取数据
 * 			存储：hs.setAttribute(String name, Object value);
 * 			获取：hs.getAttribute(String name); 返回的数据类型为Object
 * 			注意：
 * 				存储的动作和取出的动作发生在不同的请求中，但是存储要先于取出执行
 * 		使用时机：
 * 			一般用户在登录web项目时会将用户的个人信息存储到session中，供该用户的其它请求使用
 * 		总结：
 * 			session解决了一个用户的不同请求的数据共享问题，只要在JSESSIONID不失效和session对象不失效的情况下，
 * 			用户的任意请求在处理时都能够获取到同一个session对象。
 * 		作用域：
 * 			一次会话
 * 			在JSESSIONID不失效和session对象不失效的情况下为整个项目内
 * 		session失效处理：
 * 			将用户请求中的JSESSIONID和后台获取的session对象的JSESSIONID进行比对，如果一致
 * 			则session没有失效，如果不一致则证明失效了。重定向到登录页面，让用户重新登陆。
 * 
 * 	注意：
 * 		JSESSIONID存储在了Cookie的临时存储空间中，浏览器关闭则失效
 * 
 * 
 */

 
 
 
 
/*ServletContext对象学习：
 * 	问题：
 * 		不同用户使用相同的数据
 * 	解决：
 * 		ServletContext对象
 * 	特点：
 * 		服务器创建
 * 		用户共享
 * 	作用域：
 * 		整个项目内
 * 	生命周期：
 * 		服务器启动到关闭
 
 
 
/*
 * 请求转发学习：
 * 		作用：实现多个servlet联动操作处理请求，避免代码冗余，让servlet职责更加明确。
 * 		使用：
 * 			req.getRequestDispatcher("要转发的地址").forward(req, resp);
 * 			地址：相对路径，直接书写servlet的别名即可。
 * 		特点：
 * 			一次请求，浏览器地址栏信息不改变。
 * 		注意：
 * 			请求转发后直接return结束即可
 * 			
 * 
 * request对象作用域：
 * 		问题：使用请求转发后，不同的servlet之间怎么进行数据的共享呢？或者说数据怎么从
 * 			一个servlet流转给另一个servlet？
 * 		解决：使用request对象作用域
 * 		使用：
 * 			request.setAttribute(Object name, Object value);
 * 			request.getAttribute(Object obj);
 * 		作用：解决了一次请求内的不同servlet的数据共享问题。
 * 		作用域：基于请求转发，一次请求中的所有servlet共享。
 * 		注意：
 * 			使用Request对象进行数据流转，数据只在一次请求内有效。
 * 		特点：
 * 			服务器创建
 * 			每次请求都会创建
 * 			生命周期为一次请求
 * 
 */
 
 
 
 
 
 重定向学习：（解决了表单重复提交的问题，以及当前servlet无法处理的请求问题）
 * 		问题：
 * 			如果当前的请求，servlet无法进行处理怎么办？
 * 			如果使用请求转发，造成表单数据重复提交怎么办？
 * 		解决：
 * 			使用重定向
 * 		使用：respond.sendRedirect("路径");
 * 		本地路径：uri
 * 		网络路径：定向资源的url信息
 * 		特点：
 * 			两次请求,两个request对象。
 * 			浏览器地址栏信息改变
 * 		时机：
 *		如果请求中有表单数据，而数据有比较重要，不能重复提交，建议使用重定向
 *		如果请求被servlet接收后，无法进行处理，建议使用重定向定位到可以处理的资源
 */
 
 
 
 
 
 
 
 
 
 
 
 